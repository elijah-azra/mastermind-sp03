knuth algorithm: #puedocode
1. S = [1111, 1112, 1113, ...., 6664, 6665, 6666]
2. initial_guess = rand(any(two pair) in S) #number like 5566 or 1122
3. read response = {black: 0-4, white: 0-4}
4. if response == {black:4, white:0}
    game won
5. remove all codes from S that do not match response relative to guess
# example: guess 1234, response {black:3,white:1}, all codes with 5 or 6 immediately removed.
6. iterate over all codes and find which next guess eliminates most possibilities
7. input next guess
8. return to step 3

genetic algorithm:
1. initialize first guess (random)
2. read response
3. initialize random population (100)
4. score each member of population:
    4.1. initialize base score 8
    4.2. set member as secret code and compare to historical guesses
    4.3 every deviating white = -1 and every deviating black = -2
    4.4 repeat for every historical guess
    4.5 average out all scores and assign average to member
5. randomly pick 2 members from population, higher scores gain higher chance to be picked
6. produce child from 2 parents members by mixing them
    6.1. select 2 indices from parent A and 2 from parent B
    6.2. no duplicate indices (can't pick 1,2 for A and 1,3 for B)
    6.3. 5% chance to randomly change one of the digits
7. repeat 5-6 until next population equals 100
8. pick random member from current population and make a guess
9. if black = 4, terminate algorithm else, repeat from step 2.
